
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CreateBusinessPartnerInput } from "@/services/business-partners";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const formSchema = z.object({
  bp_name: z.string().min(1, "Business partner name is required").max(100, "Maximum 100 characters"),
  contact_person: z.string().min(1, "Contact person is required").max(50, "Maximum 50 characters"),
  phone_country: z.string().optional(),
  phone_number: z.string().optional(),
  email: z.string().email("Invalid email format").optional().or(z.literal('')),
  address: z.string().optional(),
  country: z.string().optional(),
  payment_terms: z.string().min(1, "Payment terms is required"),
  payment_method: z.string().optional(),
  bp_type: z.string().optional(),
  material_1: z.string().optional(),
  material_2: z.string().optional(),
  material_3: z.string().optional(),
  communication_method: z.string().optional(),
  shipping_method: z.string().optional(),
});

// Country options for dropdown
const countries = [
  "United States", "Canada", "United Kingdom", "Australia", 
  "Germany", "France", "Japan", "China", "India", "Brazil",
  "Mexico", "South Africa", "Russia", "Italy", "Spain"
];

// Payment terms options
const paymentTermsOptions = [
  "Immediate", "1 Week", "10 Days", "15 Days", "30 Days", "45 Days"
];

// Payment method options
const paymentMethodOptions = [
  "Bank Transfer", "Check", "Digital Payment (UPI)", 
  "Credit / Debit Card", "Automatic Payment Run", "Integrations (PMW)"
];

// Business partner type options
const bpTypeOptions = [
  "Customer", "Vendor", "Return Vendor", 
  "Agent / Broker / Rep", "Alternate Payee", "Return Customer"
];

// Communication method options
const communicationMethodOptions = [
  "Email", "Message", "Whatsapp", "Telegram app", "Other"
];

// Shipping method options
const shippingMethodOptions = [
  "Transport", "Portal (Rapido, Portor)", "Express Shipping (Fedex, DHL)",
  "Customer Pickup", "Free Delivery", "COD", "Third-Party", "Rapido",
  "ACPL", "Courier", "Own Transport", "Customer Transport"
];

// Country code options for phone
const countryCodes = [
  { code: "+1", name: "United States" },
  { code: "+44", name: "United Kingdom" },
  { code: "+91", name: "India" },
  { code: "+49", name: "Germany" },
  { code: "+33", name: "France" },
  { code: "+61", name: "Australia" },
  { code: "+86", name: "China" },
  { code: "+81", name: "Japan" },
  { code: "+7", name: "Russia" },
  { code: "+55", name: "Brazil" },
  { code: "+52", name: "Mexico" },
  { code: "+27", name: "South Africa" },
  { code: "+39", name: "Italy" },
  { code: "+34", name: "Spain" },
  { code: "+1", name: "Canada" },
];

interface BusinessPartnerFormProps {
  onSuccess: () => void;
  initialData?: CreateBusinessPartnerInput;
  isEditing?: boolean;
}

export function BusinessPartnerForm({
  onSuccess,
  initialData,
  isEditing = false,
}: BusinessPartnerFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [activeTab, setActiveTab] = useState("basic");

  const form = useForm<CreateBusinessPartnerInput>({
    resolver: zodResolver(formSchema),
    defaultValues: initialData || {
      bp_name: "",
      contact_person: "",
      phone_country: "+1",
      phone_number: "",
      email: "",
      address: "",
      country: "",
      payment_terms: "30 Days",
      payment_method: "Bank Transfer",
      bp_type: "Customer",
      material_1: "",
      material_2: "",
      material_3: "",
      communication_method: "Email",
      shipping_method: "Transport",
    },
  });

  async function onSubmit(data: CreateBusinessPartnerInput) {
    setIsSubmitting(true);
    try {
      // The BP code will be auto-generated by the database
      onSuccess();
    } catch (error) {
      console.error("Error submitting business partner:", error);
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <div className="bg-white dark:bg-gray-950 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-800">
      <h2 className="text-2xl font-semibold mb-6">
        {isEditing ? "Edit Business Partner" : "Add New Business Partner"}
      </h2>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-4">
              <TabsTrigger value="basic">Basic Information</TabsTrigger>
              <TabsTrigger value="payment">Payment & Type</TabsTrigger>
              <TabsTrigger value="materials">Materials</TabsTrigger>
              <TabsTrigger value="logistics">Communication & Shipping</TabsTrigger>
            </TabsList>

            <TabsContent value="basic" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="bp_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Business Partner Name*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter business partner name" {...field} />
                      </FormControl>
                      <FormDescription>
                        Maximum 100 characters
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="contact_person"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contact Person/Designation*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter contact person" {...field} />
                      </FormControl>
                      <FormDescription>
                        Maximum 50 characters
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex gap-2">
                  <div className="w-1/3">
                    <FormField
                      control={form.control}
                      name="phone_country"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Country Code</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            defaultValue={field.value || "+1"}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {countryCodes.map((country) => (
                                <SelectItem key={country.code + country.name} value={country.code}>
                                  {country.code} ({country.name})
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="w-2/3">
                    <FormField
                      control={form.control}
                      name="phone_number"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Phone Number</FormLabel>
                          <FormControl>
                            <Input placeholder="Enter phone number" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Enter email" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address</FormLabel>
                      <FormControl>
                        <Textarea placeholder="Enter address" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="country"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Country</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a country" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {countries.map((country) => (
                            <SelectItem key={country} value={country}>{country}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </TabsContent>

            <TabsContent value="payment" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="payment_terms"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Payment Terms*</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select payment terms" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {paymentTermsOptions.map((term) => (
                            <SelectItem key={term} value={term}>{term}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="payment_method"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Payment Method</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select payment method" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {paymentMethodOptions.map((method) => (
                            <SelectItem key={method} value={method}>{method}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="bp_type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Business Partner Type</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select business partner type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {bpTypeOptions.map((type) => (
                          <SelectItem key={type} value={type}>{type}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </TabsContent>

            <TabsContent value="materials" className="space-y-4">
              <div className="grid grid-cols-1 gap-4">
                <FormField
                  control={form.control}
                  name="material_1"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Material 1</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter material" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="material_2"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Material 2</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter material" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="material_3"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Material 3</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter material" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </TabsContent>

            <TabsContent value="logistics" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="communication_method"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Communication Method</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select communication method" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {communicationMethodOptions.map((method) => (
                            <SelectItem key={method} value={method}>{method}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="shipping_method"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Shipping Method</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select shipping method" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {shippingMethodOptions.map((method) => (
                            <SelectItem key={method} value={method}>{method}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </TabsContent>
          </Tabs>

          <div className="flex justify-end gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => onSuccess()}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Saving..." : isEditing ? "Update Partner" : "Add Partner"}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}
