
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { BusinessPartner } from "@/types/businessPartner";

export type BusinessPartnerInput = {
  bp_name: string;
  contact_person: string;
  phone_country?: string | null;
  phone_number?: string | null;
  email?: string | null;
  address?: string | null;
  country?: string | null;
  payment_terms: string;
  payment_method?: string | null;
  bp_type?: string | null;
  material_1?: string | null;
  material_2?: string | null;
  material_3?: string | null;
  communication_method?: string | null;
  shipping_method?: string | null;
};

export const createBusinessPartner = async (data: BusinessPartnerInput): Promise<BusinessPartner | null> => {
  try {
    // Use the "upsert" method with "onConflict" to handle potential conflicts better
    // We need to use 'as any' to bypass the type check since bp_code is generated by a database trigger
    const { data: newPartner, error } = await supabase
      .from('business_partners')
      .insert(data as any)
      .select()
      .single();

    if (error) {
      if (error.message.includes('statement timeout')) {
        // Even though we got a timeout, the operation might have succeeded
        // Let's check if the business partner was actually created
        const { data: checkPartner } = await supabase
          .from('business_partners')
          .select()
          .match({ 
            bp_name: data.bp_name, 
            contact_person: data.contact_person,
            email: data.email 
          })
          .order('created_at', { ascending: false })
          .limit(1);
        
        if (checkPartner && checkPartner.length > 0) {
          toast.success('Business Partner created successfully');
          return checkPartner[0];
        }
        
        toast.error('Request timed out. Please try again.');
      } else if (error.message.includes('duplicate key')) {
        toast.error('A business partner with this code already exists.');
      } else {
        toast.error(`Error creating business partner: ${error.message}`);
      }
      console.error('Supabase error:', error);
      return null;
    }
    
    toast.success('Business Partner created successfully');
    return newPartner;
  } catch (error: any) {
    console.error('Unexpected error:', error);
    toast.error(`Error creating business partner: ${error.message || 'Unknown error'}`);
    return null;
  }
};

export const getBusinessPartners = async (): Promise<BusinessPartner[]> => {
  try {
    const { data, error } = await supabase
      .from('business_partners')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      if (error.message.includes('statement timeout')) {
        toast.error('Request timed out while fetching business partners.');
      } else {
        toast.error(`Error fetching business partners: ${error.message}`);
      }
      console.error('Supabase error:', error);
      return [];
    }
    
    return data || [];
  } catch (error: any) {
    console.error('Unexpected error:', error);
    toast.error(`Error fetching business partners: ${error.message || 'Unknown error'}`);
    return [];
  }
};
